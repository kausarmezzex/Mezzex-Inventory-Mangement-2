@model Mezzex_Inventory_Mangement.ViewModels.AssignPagesToRolesViewModel

<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.18/css/bootstrap-select.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" /> <!-- Bootstrap Icons -->

<style>
    .compact-table {
        font-size: 0.9em;
        white-space: nowrap;
    }

        .compact-table th,
        .compact-table td {
            padding: 8px;
            vertical-align: middle;
        }

    .role-page-dropdown {
        width: 160px !important;
    }

    .form-check {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .search-input {
        width: 100%;
        max-width: 300px;
        padding: 7px 23px;
        border: 1px solid #ced4da;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        outline-style :none;
    }

    #pageSearch:focus {
        outline: none;
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.5); /* Example of a custom shadow */
    }

    /* Fixed alert styling */
    .fixed-alert {
        position: fixed;
        top: 10px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 1050; /* Ensure it is above other elements */
        width: auto; /* Adjust based on content */
        max-width: 90%; /* Prevent it from spanning too wide */
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
    }

        .fixed-alert.show {
            opacity: 1;
        }

    .btn-primary,
    .btn-info {
        font-size: 0.9em;
    }

    .dropdown-checkbox-wrapper {
        display: flex;
        align-items: center;
        gap: 10px;
    }
</style>

<!-- Page Header -->
<div class="d-flex justify-content-between align-items-center mb-4 mt-4">
    <!-- Search Input -->
    <div class="input-group" style="max-width: 300px;">
        <span class="input-group-text bg-white border-end-0 rounded-start">
            <i class="bi bi-search text-muted"></i> <!-- Search Icon -->
        </span>
        <input type="text" id="pageSearch"
               class="form-control border-start-0 rounded-end"
               placeholder="Search By Page Name" />
    </div>

    <div id="alertContainer" class="flex-grow-1 me-3"></div>

    <!-- Action Buttons -->
    <div class="d-flex">
        <button type="submit" class="btn btn-primary me-2" form="assignForm">
            <i class="bi bi-check-circle-fill"></i> Save Permissions
        </button>
        <button type="button" id="exportToExcel" class="btn btn-info text-black">
            <i class="bi bi-file-earmark-plus"></i> Create Page
        </button>
    </div>
</div>

<form id="assignForm" method="post">
    @Html.AntiForgeryToken()
    <div class="table-responsive">
        <table class="table table-striped table-hover compact-table w-100" id="rolePageTable">
            <thead class="table-dark">
                <tr>
                    <th>Page Name</th>
                    @foreach (var role in Model.Roles)
                    {
                        <th>@role.Name</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var group in Model.GroupedPagesByController)  
                {
                    <tr>
                        <td>@group.Key</td>
                        @foreach (var role in Model.Roles)
                        {
                            <td>
                                <div class="dropdown-checkbox-wrapper">
                                    <!-- Checkbox -->
                                    

                                    <!-- Dropdown -->
                                    <select class="selectpicker form-control role-page-dropdown"
                                            name="PageAssignments"
                                            multiple data-live-search="true" data-selected-text-format="count > 1"
                                            data-style="btn-light btn-sm" data-actions-box="true"
                                            title="Select Pages"
                                            data-role-id="@role.Id"
                                            data-controller-name="@group.Key">
                                        @foreach (var pages in group.Value)
                                        {
                                            var isSelected = Model.PageRoleMappings.Any(m => m.PageId == pages.Id && m.RoleId == role.Id);

                                            // Extract the name after the "-" character
                                            var displayName = pages.Name.Contains('-') ? pages.Name.Split('-')[1].Trim() : pages.Name;

                                            if (isSelected)
                                            {
                                                <option value="@pages.Id" selected>@displayName</option>
                                            }
                                            else
                                            {
                                                <option value="@pages.Id">@displayName</option>
                                            }
                                        }
                                    </select>

                                    <input type="checkbox" class="form-check-input role-checkbox"
                                           data-role-id="@role.Id"
                                           data-controller-name="@group.Key"
                                    @(Model.PageRoleMappings.Any(m => m.RoleId == role.Id && group.Value.Any(p => p.Id == m.PageId)) ? "checked" : "") />
                                </div>
                                <!-- Selected Pages Below -->
                                <div class="selected-pages">
                                    @if (Model.PageRoleMappings.Any(m => m.RoleId == role.Id))
                                    {
                                        var selectedPages = group.Value
                                        .Where(p => Model.PageRoleMappings.Any(m => m.PageId == p.Id && m.RoleId == role.Id))
                                        .Select(p => p.Name.Contains('-') ? p.Name.Split('-')[1].Trim() : p.Name)
                                        .ToList();

                                        <small>
                                            @for (int i = 0; i < selectedPages.Count; i++)
                                            {
                                                @selectedPages[i]
                                                @if ((i + 1) % 2 == 0 && i < selectedPages.Count - 1)
                                                {
                                                    <br />
                                                }
                                                else if (i < selectedPages.Count - 1)
                                                {
                                                    <span>, </span>
                                                }
                                            }
                                        </small>
                                    }
                                </div>

                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
</form>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>  
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.1/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.18/js/bootstrap-select.min.js"></script>
    <script>
        $(document).ready(function () {
            $('#pageSearch').on('keyup', function () {
                const searchValue = $(this).val().toLowerCase(); // Get the input value and convert to lowercase
                $('#rolePageTable tbody tr').filter(function () {
                    // Check if the Page Name column (first <td>) contains the search term
                    $(this).toggle($(this).find('td:first').text().toLowerCase().indexOf(searchValue) > -1);
                });
            });
            $('.selectpicker').selectpicker();

            // Handle role checkbox toggle for each cell
            $('.role-checkbox').on('change', function () {
                const checkbox = $(this);
                const roleId = checkbox.data('role-id');
                const controllerName = checkbox.data('controller-name');
                const dropdown = $(`.role-page-dropdown[data-role-id='${roleId}'][data-controller-name='${controllerName}']`);

                if (checkbox.is(':checked')) {
                    // Select all pages in the dropdown for this role and controller
                    dropdown.find('option').prop('selected', true); // Select all options
                    dropdown.selectpicker('refresh');
                } else {
                    // Deselect all pages in the dropdown for this role and controller
                    dropdown.find('option').prop('selected', false); // Deselect all options
                    dropdown.selectpicker('refresh');
                }
            });

            // Handle role checkbox toggle
            $('.role-checkbox').on('change', function () {
                const checkbox = $(this);
                const roleId = checkbox.data('role-id');
                const controllerName = checkbox.data('controller-name');
                const dropdown = $(`.role-page-dropdown[data-role-id='${roleId}'][data-controller-name='${controllerName}']`);

                if (checkbox.is(':checked')) {
                    // Enable dropdown
                    dropdown.prop('disabled', false).removeClass('disabled-dropdown');
                    dropdown.selectpicker('refresh');
                } else {
                    // Disable dropdown and deselect all options
                    dropdown.prop('disabled', true).addClass('disabled-dropdown');
                    dropdown.find('option').prop('selected', false);
                    dropdown.selectpicker('refresh');
                }
            });
            // Apply the logic on page load for checkboxes
            $('.role-checkbox').each(function () {
                const checkbox = $(this);
                const roleId = checkbox.data('role-id');
                const controllerName = checkbox.data('controller-name');
                const dropdown = $(`.role-page-dropdown[data-role-id='${roleId}'][data-controller-name='${controllerName}']`);

                if (!checkbox.is(':checked')) {
                    // Disable dropdown initially if checkbox is unchecked
                    dropdown.prop('disabled', true).addClass('disabled-dropdown');
                    dropdown.selectpicker('refresh');
                }
            });

            $('#assignForm').on('submit', async function (e) {
                e.preventDefault(); // Prevent default form submission

                const changes = []; // Collect changes for submission

                // Loop through each dropdown (role-page assignment)
                $('[data-role-id]').each(function () {
                    const dropdown = $(this);
                    const roleId = dropdown.data('role-id');
                    const selectedPages = dropdown.val(); // Get selected page IDs

                    // Ensure selectedPages is an array
                    const pageIds = Array.isArray(selectedPages) ? selectedPages : [];

                    if (pageIds.length > 0) {
                        changes.push({
                            RoleId: roleId,
                            PageIds: pageIds.map(id => parseInt(id, 10)) // Ensure IDs are integers
                        });
                    }
                });

                if (changes.length === 0) {
                    location.reload();
                    showAlert('No changes to save!', 'warning'); // Show warning alert
                    return;
                }

                try {
                    const response = await fetch('/PageManagement/SavePageAssignments', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        body: JSON.stringify(changes) // Send changes as JSON
                    });

                    if (response.ok) {
                        const data = await response.json();
                        if (data.success) {
                            showAlert(data.message, 'success'); // Show success alert
                            setTimeout(() => {
                                location.reload(); // Reload the page after a delay
                            }, 2000); // Delay of 3 seconds
                        } else {
                            showAlert(data.message, 'danger'); // Show error alert
                            setTimeout(() => {
                                location.reload(); // Reload the page after a delay
                            }, 2000); // Delay of 3 seconds
                        }
                    } else {
                        const errorText = await response.text();
                        console.error('Server error:', errorText);
                        showAlert('An error occurred. Please try again.', 'danger'); // Show generic error alert
                    }
                } catch (error) {
                    console.error('Fetch error:', error);
                    showAlert('A network error occurred. Please check your connection.', 'danger'); // Show network error alert
                }
            });
            // Function to display the alert
            function showAlert(message, type) {
                // Create the alert HTML dynamically
                let alertDiv = document.createElement("div");
                alertDiv.className = `alert alert-${type} alert-dismissible fade show fixed-alert`; // Bootstrap + Fixed Alert
                alertDiv.role = "alert";
                alertDiv.innerHTML = `
                                ${message}
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            `;

                // Append the alert to the body (or a specific location)
                document.body.appendChild(alertDiv);

                // Automatically remove the alert after 1 second
                setTimeout(() => {
                    alertDiv.classList.remove("show"); // Fade out
                    setTimeout(() => alertDiv.remove(), 300); // Remove from DOM after fade-out
                }, 2000);
            }


            // Export to Excel
            $('#exportToExcel').on('click', function () {
                window.location.href = '/PageManagement';
            });
        });
    </script>
}
