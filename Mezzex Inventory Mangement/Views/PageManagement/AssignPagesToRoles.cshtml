@model Mezzex_Inventory_Mangement.ViewModels.AssignPagesToRolesViewModel


<style>
    /* Compact table style */
    .compact-table {
        font-size: 0.9em;
        white-space: nowrap;
    }

        /* Ensure table cells have consistent padding and alignment */
        .compact-table th,
        .compact-table td {
            padding: 8px;
            text-align: start;
            vertical-align: middle;
        }

        /* Center-align the header text */
        .compact-table th {
            text-align: start;
            background-color: #343a40;
            color: #fff;
        }

    /* Additional styling for checkboxes */
    .role-page-checkbox {
        display: block;
    }

    /* Fixed alert styling */
    .fixed-alert {
        position: fixed;
        top: 10px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 1050; /* Ensure it is above other elements */
        width: auto; /* Adjust based on content */
        max-width: 90%; /* Prevent it from spanning too wide */
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
    }

        .fixed-alert.show {
            opacity: 1;
        }
</style>

<h3 class="text-center my-4">Assign Pages to Roles</h3>

<div class="d-flex justify-content-between align-items-center mb-3 mt-5">
    <!-- Search input -->
    <input type="text" id="pageNameSearch"
           class="form-control me-3"
           style="width: 100%; max-width: 300px; padding: 7px 23px; border: 1px solid #ced4da; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); transition: box-shadow 0.3s ease, border-color 0.3s ease;"
           placeholder="Search By Page Name"
           onkeyup="filterPageTable()" />

    <!-- Alerts section -->
    <div id="alertContainer" class="flex-grow-1 me-3"></div>

    <!-- Button group for "Export to Excel" -->
    <div class="d-flex">
        <button id="exportExcel" class="btn btn-success">
            <i class="bi bi-file-earmark-excel"></i> Export to Excel
        </button>
    </div>
</div>

<div class="table-responsive">
    <table class="table table-striped table-hover compact-table" id="rolePageTable">
        <thead class="table-dark">
            <tr>
                <th>Page Name</th>
                @foreach (var role in Model.Roles)
                {
                    <th>@role.Name</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var pages in Model.Pages)
            {
                <tr>
                    <td>@pages.Name</td>
                    @foreach (var role in Model.Roles)
                    {
                        var isChecked = Model.PageRoleMappings.Any(m => m.PageId == pages.Id && m.RoleId == role.Id);
                        <td class="text-center">
                            <input type="checkbox"
                                   class="role-page-checkbox"
                                   data-page-id="@pages.Id"
                                   data-role-id="@role.Id"
                            @(isChecked ? "checked" : "") />
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>

<form method="post">
    @Html.AntiForgeryToken()
</form>

@section Scripts {
    <script>
        // Function to display the alert
        function showAlert(message, type) {
            // Create the alert HTML dynamically
            let alertDiv = document.createElement("div");
            alertDiv.className = `alert alert-${type} alert-dismissible fade show fixed-alert`; // Bootstrap + Fixed Alert
            alertDiv.role = "alert";
            alertDiv.innerHTML = `
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    `;

            // Append the alert to the body (or a specific location)
            document.body.appendChild(alertDiv);

            // Automatically remove the alert after 1 second
            setTimeout(() => {
                alertDiv.classList.remove("show"); // Fade out
                setTimeout(() => alertDiv.remove(), 300); // Remove from DOM after fade-out
            }, 1000);
        }

        // Handle table filtering by page name
        function filterPageTable() {
            let searchValue = document.getElementById("pageNameSearch").value.toLowerCase();
            let table = document.getElementById("rolePageTable");
            let rows = table.getElementsByTagName("tr");

            for (let i = 1; i < rows.length; i++) {
                let pageNameCell = rows[i].getElementsByTagName("td")[0];
                if (pageNameCell) {
                    let pageName = pageNameCell.textContent || pageNameCell.innerText;
                    rows[i].style.display = pageName.toLowerCase().includes(searchValue) ? "" : "none";
                }
            }
        }

        $(document).ready(function () {
            $('.role-page-checkbox').change(function () {
                var pageId = $(this).data('page-id');
                var roleId = $(this).data('role-id');
                var isAssigned = $(this).is(':checked');

                var token = $('input[name="__RequestVerificationToken"]').val();

                $.ajax({
                    url: '@Url.Action("TogglePageRoleMapping", "PageManagement")',
                    type: 'POST',
                    headers: {
                        'RequestVerificationToken': token
                    },
                    data: {
                        pageId: pageId,
                        roleId: roleId,
                        isAssigned: isAssigned
                    },
                    success: function (response) {
                        console.log("AJAX Success:", response);
                        if (response.success) {
                            showAlert(response.message, 'success');
                        } else {
                            showAlert('Failed to update mapping. Please try again.', 'danger');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("AJAX Error:", xhr.responseText);
                        showAlert('An error occurred: ' + xhr.responseText, 'danger');
                    }
                });
            });
        });

    </script>
}
